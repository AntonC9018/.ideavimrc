" Show a few lines of context around the cursor. Note that this makes the
"" -- Suggested options --
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

"set sneak

set relativenumber
set number

"https://github.com/JetBrains/ideavim/wiki/sethandler
sethandler <C-e> a:ide
sethandler <C-k> n:vim i-x:ide
sethandler <C-j> n:vim i-x:ide

let mapleader=" "

"A more convenient copy-paste to the system clipboard.
"Used to map to another buffer, but I seem not to always use this instead.
vmap <leader>c "*y
vmap <leader>y "*y
vmap <leader>v "*p
nmap <leader>p "*p
vmap <leader>P "*P
vmap <leader>d "*d

nmap <leader>c "*yy
nmap <leader>y "*yy
nmap <leader>v "*p
nmap <leader>p "*p
nmap <leader>P "*P
nmap <leader>d "*dd

nmap & v$
map <C-j> <C-d>
map <C-k> <C-u>

nmap <C-i> <Action>(ShowHoverInfo)

"Makes a map from Alt+<key> (and Command+<key> on Mac)
"args is a dictionary:
"   'mode' is the map function prefix. Can be 'n', 'v', 'vnore', etc.
"   'modifiedKey' is the key that will be modified by alt
"   'action' is the action it's going to be mapped to
"mode can be omitted to mean just 'map' (all modes)
function! AltMac(args)
    let mode = get(a:args, 'mode', '')
    let modeFuncName = mode . 'map'

    if !has_key(a:args, 'modifiedKey')
        echoerr "AltMac: 'modifiedKey' is required"
        return
    endif
    let fromKey = a:args['modifiedKey']
    if len(fromKey) != 1
        echoerr "AltMac: 'modifiedKey' must be a single character"
        return
    endif

    if !has_key(a:args, 'action')
        echoerr "AltMac: 'action' is required"
        return
    endif
    let toAction = a:args['action']
    if len(toAction) == 0
        echoerr "AltMac: 'action' must be a non-empty string"
        return
    endif

    for altKeyLetter in ['M', 'D']
        let from = '<' . altKeyLetter . '-' . fromKey . '>'
        execute modeFuncName . ' ' . from . ' ' . toAction
    endfor
endfunction

"Move lines up or down in the usual Alt+j/k way
:call AltMac({ 'modifiedKey': 'j', 'action': '<Action>(MoveLineDown)' })
:call AltMac({ 'modifiedKey': 'k', 'action': '<Action>(MoveLineUp)' })

"Keep the selection after indenting or dedenting
vnoremap > >gv
vnoremap < <gv
vnoremap = =gv

"Go to definition things
nmap gi <Action>(GotoImplementation)
nmap gt <Action>(GotoTypeDeclaration)
nmap gm <Action>(GotoSuperMethod)
map ge <Action>(ReSharperGotoNextErrorInSolution)
map gE <Action>(ReSharperGotoPrevErrorInSolution)
nmap gu <Action>(FindUsages)

"Local symbol
nmap gs <Action>(FileStructurePopup)

"Remap the marker
nnoremap <leader>m m

"Navigate methods
map m <Action>(MethodDown)
map M <Action>(MethodUp)

"Select everything
Plug 'kana/vim-textobj-entire'
nmap <leader>a vae

"Search selection, you can then replace with "cgn"
vmap <leader>gs y/<C-r>"<CR>Ncgn

"I never use w for navigation.
"nmap w :w<CR>

nmap ww <Action>(EditorToggleUseSoftWraps)
nmap wq <Action>(CloseAllEditorsButActive)
nmap wQ <Action>(CloseAllEditors)
nmap wu <Action>(ActivateUnitTestsToolWindow)
nmap wgu <Action>(ActivateFindToolWindow)
nmap we <Action>(ActivateProjectToolWindow)
nmap wf <Action>(ActivateFindToolWindow)
nmap wdi <Action>(ShowBlankDiffWindow)
nmap wdg <Action>(ActivateDebugToolWindow)
nmap wgd <Action>(ActivateDebugToolWindow)
nmap wn <Action>(JumpToLastWindow)
nmap wp <Action>(WelcomeScreen.Plugins)
"Ctrl+8 toggles the latest tool window, mapped via the IDE.

nmap <leader>ur <Action>(RiderUnitTestRunContextAction)
nmap <leader>ud <Action>(RiderUnitTestDebugContextAction)

nmap <leader>ref <Action>(ReformatCode)

"Doesn't seem to work.
"nmap <leader>inl <Action>(ToggleInlayHintsGloballyAction)

"Broken in one way or another, so screw this one.
"map <leader>, f,r<CR>

map <leader>ss <Action>(GotoSymbol)
"Command
map <leader><leader> <Action>(GotoAction)
map <leader>sp <Action>(GotoFile)

"Really useful, it's a shame this doesn't work for blocks in Rider.
"Give the issue a thumbs up:
"https://youtrack.jetbrains.com/issue/RIDER-85651/Support-folding-anonymous-code-blocks
map H <Action>(CollapseRegion)
map L <Action>(ExpandRegion)

"Mapped this in the ide instead because it's bugged
"map <C-i> <Action>(ParameterInfo)

"visual: S" or e.g. S] to surround with "" or []
"normal: cs"' to change " to '
"normal: ys<motion>" to surround with "
Plug 'tpope/vim-surround'

"gr to replace motion with default register
Plug 'vim-scripts/ReplaceWithRegister'

"via -- to select arguments
let g:argtextobj_pairs="(:),{:},<:>"
Plug 'vim-scripts/argtextobj.vim'

"cx{motion} -- to swap text
"X -- in visual mode
Plug 'tommcdo/vim-exchange'

"{ and } match empty lines with indentation
Plug 'dbakker/vim-paragraph-motion'

"gq to wrap column
map gq <Action>(com.andrewbrookins.idea.wrap.WrapAction)

" Git stuff
"TODO: Make this do an error sound if the file is not openable on github.
" Git Hub Open
map <leader>gho <Action>(Github.Open.In.Browser)
" Git blame
" map <leader>gbl <Action>(???)

" Diff of the current file
map <leader>gd <Action>(Compare.SameVersion)
" Log
map <leader>gl <Action>(Vcs.ShowTabbedFileHistory)
map <leader>gL <Action>(LocalHistory.ShowHistory)

nmap ; <Action>(KJumpAction)

map й q
map ц w
map у e
map к r
map е t
map н y
map г u
map ш i
map щ o
map з p
map х [
map ъ ]
map ф a
map ы s
map в d
map а f
map п g
map р h
map о j
map л k
map д l
map ж ;
map э '
map ё `
map я z
map ч x
map с c
map м v
map и b
map т n
map ь m
map б ,
map ю .

map Й Q
map Ц W
map У E
map К R
map Е T
map Н Y
map Г U
map Ш I
map Щ O
map З P
map Х {
map Ъ }
map Ф A
map Ы S
map В D
map А F
map П G
map Р H
map О J
map Л K
map Д L
map Ж :
map Э "
map Я Z
map Ч X
map С C
map М V
map И B
map Т N
map Ь M
map Б <
map Ю >
map Ё ~

map ă [
map î ]
map â \
map ș ;
map ț '
map Ă {
map Î }
map Â |
map Ș :
map Ț "
