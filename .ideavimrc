" Show a few lines of context around the cursor. Note that this makes the
"" -- Suggested options --
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

"set sneak

set relativenumber
set number

let mapleader=" "

"Copy paste into a separate buffer.
"Useful because replacing text normally overwrites the default buffer,
"while that buffer's history cannot be accessed.
map <leader>y "ay
map <leader>p "ap
map <leader>P "aP
map <leader>d "ad

"Move lines up or down in the usual Alt+j/k way
map <M-j> <Action>(MoveLineDown)
map <M-k> <Action>(MoveLineUp)

"Keep the selection after indenting or dedenting
vnoremap > >gv
vnoremap < <gv
vnoremap = =gv

"A more convenient copy-paste to the system clipboard
vmap <leader>c "*y
vmap <leader>v "*p
vmap <leader>V "*P
nmap <leader>c "*yy
nmap <leader>v "*p
nmap <leader>V "*P

"Go to definition things
nmap gi <Action>(GotoImplementation)
nmap gt <Action>(GotoTypeDeclaration)
nmap ge <Action>(ReSharperGotoNextErrorInSolution)
nmap gE <Action>(ReSharperGotoPrevErrorInSolution)
nmap gR <Action>(FindUsages)

"Select everything
nmap <leader>a ggVG

"Search selection, you can then replace with "cgn"
vmap <leader>s y/<C-r>"<CR>Ncgn

nmap <leader>ww <Action>(EditorToggleUseSoftWraps)
nmap <leader>wq <Action>(CloseAllEditorsButActive)
nmap <leader>wQ <Action>(CloseAllEditors)
nmap <leader>wu <Action>(ActivateUnitTestsToolWindow)
nmap <leader>we <Action>(ActivateProjectToolWindow)
nmap <leader>wf <Action>(ActivateFindToolWindow)

map <leader>, f,a<CR><Esc>

map <leader>/f <Action>(FindInPath)
map <leader>/h <Action>(ReplaceInPath)
map <leader>/s <Action>(GotoSymbol)
"Command
map <leader>/c <Action>(GotoAction)
map <leader>/p <Action>(GotoFile)
map <leader>/e <Action>(RecentFiles)

map H <Action>(CollapseRegion)
map L <Action>(ExpandRegion)

"DebugBreakpoint
map <leader>db <Action>(ToggleLineBreakpoint)
"DebugCome
map <leader>dc <Action>(RunToCursor)

imap <C-i> <Action>(ParameterInfo)

"visual: S" or e.g. S] to surround with "" or []
"normal: cs"' to change " to '
"normal: ys<motion>" to surround with "
Plug 'tpope/vim-surround'

"gr to replace motion with default register
Plug 'vim-scripts/ReplaceWithRegister'

"via -- to select arguments
let g:argtextobj_pairs="(:),{:},<:>"
Plug 'vim-scripts/argtextobj.vim'

"cx{motion} -- to swap text
"X -- in visual mode
Plug 'tommcdo/vim-exchange'

"{ and } match empty lines with indentation
Plug 'dbakker/vim-paragraph-motion'
